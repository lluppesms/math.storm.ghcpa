@page "/leaderboard"
@rendermode InteractiveServer
@inject MathStorm.Web.Services.IRemoteFunctionsService FunctionService
@using MathStorm.Web.Services
@using MathStorm.Web.Components.Game
@using MathStorm.Common.DTOs

<PageTitle>Leaderboard - Math Storm</PageTitle>

<div class="container-fluid">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header text-center">
                    <h1 class="display-4"><i class="fas fa-trophy text-warning"></i> Leaderboard</h1>
                    <p class="lead">See the top performers for each difficulty level!</p>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-12 mb-4">
                            <h3><i class="fas fa-cog"></i> Select Difficulty Level</h3>
                            <div class="row">
                                <div class="col-md-6 col-lg-3 mb-3">
                                    <div class="card @(selectedDifficulty == Difficulty.Beginner ? "border-primary bg-light" : "") difficulty-card" 
                                         @onclick="() => SelectDifficulty(Difficulty.Beginner)" style="cursor: pointer;">
                                        <div class="card-body text-center">
                                            <h5 class="card-title text-success">ðŸŒ± Beginner</h5>
                                            <p class="card-text small">
                                                5 questions<br>
                                                2-digit numbers<br>
                                                Addition & Subtraction only
                                            </p>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6 col-lg-3 mb-3">
                                    <div class="card @(selectedDifficulty == Difficulty.Novice ? "border-primary bg-light" : "") difficulty-card" 
                                         @onclick="() => SelectDifficulty(Difficulty.Novice)" style="cursor: pointer;">
                                        <div class="card-body text-center">
                                            <h5 class="card-title text-info">ðŸš€ Novice</h5>
                                            <p class="card-text small">
                                                5 questions<br>
                                                2-digit numbers<br>
                                                All operations
                                            </p>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6 col-lg-3 mb-3">
                                    <div class="card @(selectedDifficulty == Difficulty.Intermediate ? "border-primary bg-light" : "") difficulty-card" 
                                         @onclick="() => SelectDifficulty(Difficulty.Intermediate)" style="cursor: pointer;">
                                        <div class="card-body text-center">
                                            <h5 class="card-title text-warning">âš¡ Intermediate</h5>
                                            <p class="card-text small">
                                                10 questions<br>
                                                3-digit numbers<br>
                                                All operations
                                            </p>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6 col-lg-3 mb-3">
                                    <div class="card @(selectedDifficulty == Difficulty.Expert ? "border-primary bg-light" : "") difficulty-card" 
                                         @onclick="() => SelectDifficulty(Difficulty.Expert)" style="cursor: pointer;">
                                        <div class="card-body text-center">
                                            <h5 class="card-title text-danger">ðŸ”¥ Expert</h5>
                                            <p class="card-text small">
                                                10 questions<br>
                                                4-digit numbers<br>
                                                All operations
                                            </p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-12">
                            <h3><i class="fas fa-medal"></i> Top 10 - @selectedDifficulty Level</h3>
                            @if (isLoading)
                            {
                                <div class="text-center">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                    <p class="mt-2">Loading leaderboard...</p>
                                </div>
                            }
                            else if (leaderboardEntries != null && leaderboardEntries.Any())
                            {
                                <div class="table-responsive">
                                    <table class="table table-striped table-hover">
                                        <thead class="table-dark">
                                            <tr>
                                                <th scope="col">Rank</th>
                                                <th scope="col">Player</th>
                                                <th scope="col">Score</th>
                                                <th scope="col">Date Achieved</th>
                                                <th scope="col" class="text-center">Analysis</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var entry in leaderboardEntries)
                                            {
                                                <tr>
                                                    <td>
                                                        @if (entry.Rank == 1)
                                                        {
                                                            <span class="badge bg-warning text-dark">ðŸ¥‡ #@entry.Rank</span>
                                                        }
                                                        else if (entry.Rank == 2)
                                                        {
                                                            <span class="badge bg-secondary">ðŸ¥ˆ #@entry.Rank</span>
                                                        }
                                                        else if (entry.Rank == 3)
                                                        {
                                                            <span class="badge bg-warning">ðŸ¥‰ #@entry.Rank</span>
                                                        }
                                                        else
                                                        {
                                                            <span class="badge bg-primary">#@entry.Rank</span>
                                                        }
                                                    </td>
                                                    <td>@entry.Username</td>
                                                    <td><strong>@entry.Score.ToString("F2")</strong></td>
                                                    <td>@entry.AchievedAt.ToString("MMM d, yyyy")</td>
                                                    <td class="text-center">
                                                        @if (!string.IsNullOrEmpty(entry.Analysis))
                                                        {
                                                            <i class="fas fa-comment-dots text-info analysis-icon" 
                                                               data-bs-toggle="tooltip" 
                                                               data-bs-placement="top" 
                                                               data-bs-html="true"
                                                               title="@GetAnalysisTooltip(entry.Analysis)"
                                                               style="cursor: help;"></i>
                                                        }
                                                        else
                                                        {
                                                            <span class="text-muted">â€”</span>
                                                        }
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            }
                            else
                            {
                                <div class="text-center">
                                    <i class="fas fa-exclamation-circle text-muted fa-3x"></i>
                                    <p class="text-muted mt-2">No scores recorded for @selectedDifficulty level yet.</p>
                                    <p class="text-muted">Be the first to set a record!</p>
                                </div>
                            }
                        </div>
                    </div>

                    <div class="row mt-4">
                        <div class="col-md-12 text-center">
                            <p class="text-muted">
                                <i class="fas fa-info-circle"></i> 
                                Remember: Lower scores are better! Score = (Error% Ã— Time) + (Time Ã— 10)
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Global Leaderboard Section -->
    <div class="row justify-content-center mt-4">
        <div class="col-md-8">
            @if (isLoadingGlobalLeaderboard)
            {
                <div class="card mt-4">
                    <div class="card-header">
                        <h5><i class="fas fa-globe text-primary"></i> Global Leaderboard - All Levels</h5>
                    </div>
                    <div class="card-body text-center">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-2">Loading global leaderboard...</p>
                    </div>
                </div>
            }
            else
            {
                <GlobalLeaderboardComponent LeaderboardEntries="@globalLeaderboardEntries" CurrentUserId="null" UserMadeLeaderboard="false" />
            }
        </div>
    </div>
</div>

@code {
    private Difficulty selectedDifficulty = Difficulty.Intermediate;
    private List<LeaderboardEntry>? leaderboardEntries;
    private List<LeaderboardEntry>? globalLeaderboardEntries;
    private bool isLoading = true;
    private bool isLoadingGlobalLeaderboard = true;

    protected override async Task OnInitializedAsync()
    {
        await Task.WhenAll(LoadLeaderboard(), LoadGlobalLeaderboard());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Initialize Bootstrap tooltips
            await Task.Delay(100); // Small delay to ensure DOM is ready
            await InitializeTooltips();
        }
    }

    private async Task InitializeTooltips()
    {
        try
        {
            await Task.Run(() => {
                // This will be handled by JavaScript interop if needed
                // For now, we'll rely on Bootstrap's built-in tooltip functionality
            });
        }
        catch
        {
            // Ignore errors - tooltips are enhancement, not critical
        }
    }

    private string GetAnalysisTooltip(string analysis)
    {
        if (string.IsNullOrEmpty(analysis))
            return string.Empty;

        // Truncate long analysis and format for HTML tooltip
        var truncated = analysis.Length > 200 ? analysis.Substring(0, 197) + "..." : analysis;
        
        // Escape HTML and replace newlines with <br>
        return System.Net.WebUtility.HtmlEncode(truncated).Replace("\n", "<br>");
    }

    private async Task SelectDifficulty(Difficulty difficulty)
    {
        selectedDifficulty = difficulty;
        await LoadLeaderboard();
        StateHasChanged();
    }

    private async Task LoadLeaderboard()
    {
        isLoading = true;
        StateHasChanged();
        
        try
        {
            var response = await FunctionService.GetLeaderboardAsync(selectedDifficulty.ToString(), 10);
            if (response?.Entries != null)
            {
                leaderboardEntries = response.Entries.Select(e => new LeaderboardEntry
                {
                    Id = e.Id,
                    UserId = e.UserId,
                    Username = e.Username,
                    GameId = e.GameId,
                    Difficulty = e.Difficulty,
                    Score = e.Score,
                    AchievedAt = e.AchievedAt,
                    Rank = e.Rank,
                    Analysis = e.Analysis
                }).ToList();
            }
            else
            {
                leaderboardEntries = new List<LeaderboardEntry>();
            }
        }
        catch
        {
            // Handle error gracefully - could add error message display
            leaderboardEntries = new List<LeaderboardEntry>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadGlobalLeaderboard()
    {
        isLoadingGlobalLeaderboard = true;
        StateHasChanged();
        
        try
        {
            var response = await FunctionService.GetLeaderboardAsync(null, 10);
            if (response?.Entries != null)
            {
                globalLeaderboardEntries = response.Entries.Select(e => new LeaderboardEntry
                {
                    Id = e.Id,
                    UserId = e.UserId,
                    Username = e.Username,
                    GameId = e.GameId,
                    Difficulty = e.Difficulty,
                    Score = e.Score,
                    AchievedAt = e.AchievedAt,
                    Rank = e.Rank,
                    Analysis = e.Analysis
                }).ToList();
            }
            else
            {
                globalLeaderboardEntries = new List<LeaderboardEntry>();
            }
        }
        catch
        {
            // Handle error gracefully - could add error message display
            globalLeaderboardEntries = new List<LeaderboardEntry>();
        }
        finally
        {
            isLoadingGlobalLeaderboard = false;
            StateHasChanged();
        }
    }
}