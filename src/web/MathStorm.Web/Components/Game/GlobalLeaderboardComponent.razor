@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject MathStorm.Web.Services.IRemoteFunctionsService FunctionService

@if (LeaderboardEntries != null && LeaderboardEntries.Any())
{
    <div class="card mt-4">
        <div class="card-header">
            <h5><i class="fas fa-globe text-primary"></i> Global Leaderboard - All Levels</h5>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-striped">
                    <thead class="table-dark">
                        <tr>
                            <th class="text-center">Rank</th>
                            <th>Username</th>
                            <th class="text-center">Level</th>
                            <th class="text-end">Score</th>
                            <th class="text-end">Achieved</th>
                            <th class="text-center">Analysis</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var entry in LeaderboardEntries)
                        {
                            <tr class="@GetRowClass(entry)" id="global-leaderboard-row-@entry.Rank">
                                <td class="text-center">
                                    @if (entry.Rank <= 3)
                                    {
                                        <span class="@GetRankBadgeClass(entry.Rank)">
                                            @GetRankIcon(entry.Rank) @entry.Rank
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary">@entry.Rank</span>
                                    }
                                </td>
                                <td>
                                    <strong>@entry.Username</strong>
                                    @if (IsCurrentUserEntry(entry))
                                    {
                                        <span class="badge bg-success ms-2">You!</span>
                                    }
                                </td>
                                <td class="text-center">
                                    <span class="badge @GetDifficultyBadgeClass(entry.Difficulty)">
                                        @GetDifficultyIcon(entry.Difficulty) @entry.Difficulty
                                    </span>
                                </td>
                                <td class="text-end">@entry.Score.ToString("F1")</td>
                                <td class="text-end">@entry.AchievedAt.ToString("MMM dd, yyyy")</td>
                                <td class="text-center">
                                    <i class="fas fa-comment-dots text-info analysis-icon" 
                                       @onclick="@(() => ShowAnalysis(entry.GameId))"
                                       data-bs-toggle="tooltip" 
                                       data-bs-placement="top" 
                                       title="Click to view game analysis"
                                       style="cursor: pointer;"></i>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            
            @if (UserMadeLeaderboard)
            {
                <div class="alert alert-success text-center mt-3">
                    <h6><i class="fas fa-star"></i> Congratulations!</h6>
                    <p class="mb-0">You made it to the global leaderboard! ðŸŽ‰</p>
                </div>
            }
            
            <div class="row mt-3">
                <div class="col-md-12 text-center">
                    <p class="text-muted small">
                        <i class="fas fa-info-circle"></i> 
                        The global leaderboard shows the top scores from all difficulty levels combined
                    </p>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="card mt-4">
        <div class="card-header">
            <h5><i class="fas fa-globe text-primary"></i> Global Leaderboard - All Levels</h5>
        </div>
        <div class="card-body text-center">
            <p class="text-muted">No scores recorded yet. Be the first to make the global leaderboard!</p>
        </div>
    </div>
}

@* Analysis Modal *@
@if (showAnalysisModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-gamepad"></i> Game Details & Analysis
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseAnalysisModal"></button>
                </div>
                <div class="modal-body">
                    @if (isLoadingAnalysis)
                    {
                        <div class="text-center">
                            <div class="spinner-border text-info" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-2">Loading game details...</p>
                        </div>
                    }
                    else if (currentGame != null)
                    {
                        <div class="row">
                            <!-- Game Summary -->
                            <div class="col-md-6">
                                <h6><i class="fas fa-chart-line"></i> Game Summary</h6>
                                <div class="card mb-3">
                                    <div class="card-body">
                                        <p><strong>Username:</strong> @currentGame.Username</p>
                                        <p><strong>Difficulty:</strong> <span class="badge @GetDifficultyBadgeClass(currentGame.Difficulty)">@currentGame.Difficulty</span></p>
                                        <p><strong>Total Score:</strong> @currentGame.TotalScore.ToString("F1")</p>
                                        <p><strong>Completed:</strong> @currentGame.CompletedAt.ToString("MMM dd, yyyy HH:mm")</p>
                                        <p><strong>Questions:</strong> @currentGame.Questions.Count</p>
                                    </div>
                                </div>

                                <!-- Question Details -->
                                <h6><i class="fas fa-list"></i> Question Details</h6>
                                <div style="max-height: 300px; overflow-y: auto;">
                                    @foreach (var question in currentGame.Questions)
                                    {
                                        <div class="card mb-2">
                                            <div class="card-body p-2">
                                                <div class="d-flex justify-content-between align-items-center">
                                                    <div>
                                                        <strong>@question.Number1 @question.Operation @question.Number2 = ?</strong>
                                                    </div>
                                                    <div class="text-end">
                                                        <small class="text-muted">@question.TimeInSeconds.ToString("F1")s</small>
                                                    </div>
                                                </div>
                                                <div class="row mt-1">
                                                    <div class="col-6">
                                                        <small><strong>Correct:</strong> @question.CorrectAnswer</small>
                                                    </div>
                                                    <div class="col-6">
                                                        <small><strong>Your Answer:</strong> @question.UserAnswer</small>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col-6">
                                                        <small><strong>Score:</strong> @question.Score.ToString("F1")</small>
                                                    </div>
                                                    <div class="col-6">
                                                        <small><strong>Accuracy:</strong> @((100 - question.PercentageDifference).ToString("F1"))%</small>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>

                            <!-- AI Analysis -->
                            <div class="col-md-6">
                                <h6><i class="fas fa-robot"></i> AI Analysis</h6>
                                @if (!string.IsNullOrEmpty(currentGame.Analysis))
                                {
                                    <div class="card">
                                        <div class="card-body">
                                            <div class="analysis-content" style="max-height: 400px; overflow-y: auto;">
                                                @((MarkupString)currentGame.Analysis.Replace("\n", "<br />"))
                                            </div>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="card">
                                        <div class="card-body text-center text-muted">
                                            <i class="fas fa-exclamation-circle"></i>
                                            <p class="mb-0">No AI analysis available for this game.</p>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="text-center text-muted">
                            <i class="fas fa-exclamation-triangle"></i>
                            <p class="mb-0">Game details could not be loaded.</p>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseAnalysisModal">Close</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter] public List<LeaderboardEntry>? LeaderboardEntries { get; set; }
    [Parameter] public string? CurrentUserId { get; set; }
    [Parameter] public bool UserMadeLeaderboard { get; set; }

    // Modal state
    private bool showAnalysisModal = false;
    private bool isLoadingAnalysis = false;
    private Game? currentGame = null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Initialize Bootstrap tooltips
            await Task.Delay(100); // Small delay to ensure DOM is ready
            await InitializeTooltips();
        }
    }

    private async Task InitializeTooltips()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("initializeTooltips");
        }
        catch
        {
            // Ignore errors - tooltips are enhancement, not critical
        }
    }

    private async Task ShowAnalysis(string gameId)
    {
        if (string.IsNullOrEmpty(gameId)) return;

        showAnalysisModal = true;
        isLoadingAnalysis = true;
        currentGame = null;
        StateHasChanged();

        try
        {
            var game = await FunctionService.GetGameByIdAsync(gameId);
            currentGame = game;
        }
        catch (Exception)
        {
            currentGame = null;
        }
        finally
        {
            isLoadingAnalysis = false;
            StateHasChanged();
        }
    }

    private void CloseAnalysisModal()
    {
        showAnalysisModal = false;
        currentGame = null;
        StateHasChanged();
    }

    private string GetRowClass(LeaderboardEntry entry)
    {
        return IsCurrentUserEntry(entry) ? "user-entry" : "";
    }

    private bool IsCurrentUserEntry(LeaderboardEntry entry)
    {
        return !string.IsNullOrEmpty(CurrentUserId) && entry.UserId == CurrentUserId;
    }

    private string GetRankBadgeClass(int rank)
    {
        return rank switch
        {
            1 => "badge bg-warning text-dark",
            2 => "badge bg-secondary",
            3 => "badge bg-dark",
            _ => "badge bg-secondary"
        };
    }

    private string GetRankIcon(int rank)
    {
        return rank switch
        {
            1 => "ðŸ¥‡",
            2 => "ðŸ¥ˆ", 
            3 => "ðŸ¥‰",
            _ => ""
        };
    }

    private string GetDifficultyBadgeClass(string difficulty)
    {
        return difficulty switch
        {
            "Beginner" => "bg-success",
            "Novice" => "bg-info",
            "Intermediate" => "bg-warning text-dark",
            "Expert" => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private string GetDifficultyIcon(string difficulty)
    {
        return difficulty switch
        {
            "Beginner" => "ðŸŒ±",
            "Novice" => "ðŸš€",
            "Intermediate" => "âš¡",
            "Expert" => "ðŸ”¥",
            _ => ""
        };
    }
}