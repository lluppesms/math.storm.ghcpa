# ----------------------------------------------------------------------------------------------------
# Template to build Azure WebApi and create artifacts
# ----------------------------------------------------------------------------------------------------
parameters: 
- name: environmentName
  default:  'DEV'
- name: runUnitTests
  default: 'false'

# ------------------------------------------------------------------------------------------------------------------------
jobs:
- deployment: InitializeBuild${{ parameters.environmentName }}WebApi
  displayName: Initialize ${{ parameters.environmentName }} Build WebApi
  environment: ${{ parameters.environmentName }}

- job: Build${{ parameters.environmentName }}WebApi
  displayName: Build ${{ parameters.environmentName }} WebApi
  
  variables:
    - name: environmentName
      value: ${{ parameters.environmentName }}
    - template: ../../vars/var-common.yml

    - name: rootDirectory
      value: '$(System.DefaultWorkingDirectory)\$(appFolderName)\'
    - name: projectDirectory
      value: '$(System.DefaultWorkingDirectory)\$(appFolderName)\$(appProjectFolderName)\'
    - name: testDirectory
      value: '$(System.DefaultWorkingDirectory)\$(appFolderName)\$(testFolderName)\'
    - name: workingDirectory
      value: '$(System.DefaultWorkingDirectory)\$(appFolderName)\$(appProjectFolderName)\'

    - name: projectFullName
      value: '$(appFolderName)\$(appProjectFolderName)\$(appProjectName).$(appProjectExtension)'
    - name: projectFullPath
      value: '$(System.DefaultWorkingDirectory)\$(projectFullName)'

    - name: testFullName
      value: '$(appFolderName)\$(testFolderName)\$(testProjectName).$(appProjectExtension)'
    - name: testFullPath
      value: '$(System.DefaultWorkingDirectory)\$(testFullName)'

    - name: appVersion
      value: $(Build.BuildNumber)

  steps:
  - task: Bash@3
    displayName: 'Display Variables'
    inputs:
      targetType: 'inline'
      script: |
        echo "Build.ArtifactStagingDirectory=$(Build.ArtifactStagingDirectory)"
        echo "System.DefaultWorkingDirectory=$(System.DefaultWorkingDirectory)"
        echo "Build.SourcesDirectory=$(Build.SourcesDirectory)"
        echo "Build.BuildId=$(Build.BuildId)"
        echo "----------------------------------------"
        echo "##[group]Display All Environment Variables:"
        printenv | sort
        echo "##[endgroup]"
    continueOnError: true

  - task: CmdLine@2
    displayName: 'Display Files'
    inputs:
      script: |
        echo "Directory of Default Working Directory:"
        tree $(System.DefaultWorkingDirectory)
        dir $(System.DefaultWorkingDirectory) /s
    continueOnError: true

  - task: NuGetToolInstaller@1
    displayName: 'Install Nuget'

  - task: CmdLine@2
    displayName: "Put Build Details in buildinfo.json"
    inputs:
      script: |
        echo {"buildDate":"$(runDateTime)","buildNumber":"$(Build.BuildNumber)","buildId":"$(Build.BuildId)","branchName":"$(Build.SourceBranchName)","commitHash":"$(Build.SourceVersion)"} > $(projectDirectory)wwwroot\buildinfo.json
    continueOnError: true
  # Not sure about the -e -n...  was that for Linux build server...?  It fails on Windows build server (adds the -e -n to the front of the file and all the quote marks)
  # - script: |
  #     echo -e -n "{\"buildDate\":\"$(runDateTime)\",\"buildNumber\":\"$(Build.BuildNumber)\",\"buildId\":\"$(Build.BuildId)\",\"branchName\":\"$(Build.SourceBranchName)\",\"commitHash\":\"$(Build.SourceVersion)\"}" > "$(projectDirectory)buildinfo.json"
  #   displayName: "Put Build Details in buildinfo.json"
  #   continueOnError: true
  
  - task: UseDotNet@2
    displayName: 'Use dotnet 8.0'
    inputs:
      version: 8.0.x

  - task: Assembly-Info-NetCore@3
    displayName: 'Update Assembly Version'
    inputs:
      Path: '$(Build.SourcesDirectory)'
      FileNames: '$(projectDirectory)*.csproj'
      InsertAttributes: true
      FileEncoding: 'auto'
      WriteBOM: true
      FailOnWarning: true
      PackageVersion: '$(appVersion)'
      UpdateBuildNumber: '$(appVersion)'
      AddBuildTag: 'v$(appVersion)'
    continueOnError: true
    
  - task: DotNetCoreCLI@2
    displayName: 'Restore Project'
    inputs:
      command: 'restore'
      projects: '$(projectFullName)'

  - task: DotNetCoreCLI@2
    displayName: 'Build Project'
    inputs:
      command: 'build'
      projects: '$(projectFullName)'
      arguments: --configuration $(buildConfiguration) --no-restore
      workingDirectory: '$(appFolderName)'

  # ------------------------------------------------------------------------------------------------------------------------
  - ${{ if eq(lower(parameters.runUnitTests), 'true') }}:
    - task: DotNetCoreCLI@2
      displayName: 'Restore Tests'
      inputs:
        command: 'restore'
        projects: '$(testFullName)'

    - task: DotNetCoreCLI@2
      displayName: 'Run Tests'
      inputs:
        command: 'test'
        workingDirectory: '$(testDirectory)'
        publishTestResults: false
        arguments: '--logger trx --results-directory "$(Build.SourcesDirectory)/TestResults/Coverage/" --collect "XPlat Code Coverage"'

    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: VSTest
        testResultsFiles: '**/*.trx'
        searchFolder: '$(Build.SourcesDirectory)/TestResults/Coverage/'
        testRunTitle: 'Unit Tests'
  # ------------------------------------------------------------------------------------------------------------------------

  - task: DotNetCoreCLI@2
    displayName: 'Run DotNet Publish'
    condition: succeededOrFailed()
    inputs:
      command: 'publish'
      projects: '$(projectFullName)'
      publishWebProjects: false
      arguments: --configuration $(buildConfiguration) --no-build --output $(System.DefaultWorkingDirectory)/_output
      workingDirectory: '$(appFolderName)'

  - task: PublishPipelineArtifact@1
    displayName: 'Publish Artifacts'
    condition: succeededOrFailed()
    inputs:
      targetPath: $(System.DefaultWorkingDirectory)/_output
      artifact: drop
      publishLocation: 'pipeline'

  - task: CmdLine@2
    displayName: 'Display Directory Tree'
    condition: succeededOrFailed()
    inputs:
      script: |
        tree $(System.DefaultWorkingDirectory)
        tree $(Build.ArtifactStagingDirectory)

# ------------------------------------------------------------------------------------------------------------------------
  - ${{ if eq(lower(parameters.runUnitTests), 'true') }}:
    - task: DotNetCoreCLI@2
      displayName: 'Install Report Generator'
      condition: succeededOrFailed()
      inputs:
        command: custom
        custom: tool
        arguments: 'install -g dotnet-reportgenerator-globaltool'

    - task: PowerShell@2
      displayName: 'Create Code Coverage Report'
      condition: succeededOrFailed()
      inputs:
        targetType: 'inline'
        script: reportgenerator -reports:$(Build.SourcesDirectory)\**\coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)\CodeCoverage -reporttypes:HtmlInline_AzurePipelines

    - task: CmdLine@2
      displayName: 'Display Files'
      condition: succeededOrFailed()
      inputs:
        script: |
          echo "Directory of Build.SourcesDirectory:"
          tree $(Build.SourcesDirectory)
          dir $(Build.SourcesDirectory) /s
      continueOnError: true

    - task: PublishCodeCoverageResults@2
      displayName: 'Publish Code Coverage Report'
      condition: succeededOrFailed()
      inputs:
        codeCoverageTool: 'cobertura'
        summaryFileLocation: '$(Build.SourcesDirectory)\**\coverage.cobertura.xml'
